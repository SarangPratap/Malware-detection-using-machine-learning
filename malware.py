import pandas as pd
import matplotlib.pyplot as plt
import numpy as np


df=pd.read_csv('MalwareData.csv',sep='|')
df=df.drop(['Name','md5'],axis=1)
df.shape

X=df.iloc[:,:-1]
y=df.iloc[:,-1]


from sklearn.metrics import confusion_matrix 
from sklearn.metrics import accuracy_score 
from sklearn.metrics import classification_report 


from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)
X_train.shape
X_test.shape

from sklearn.linear_model import LogisticRegression
lr = LogisticRegression()
lr.fit(X_train,y_train)
y_pred=lr.predict(X_test)

result1 = confusion_matrix(y_test, y_pred) 
print('Confusion Matrix :')
print(result1) 
print('Accuracy Score :',accuracy_score(y_test, y_pred))
print('Report : ')
print(classification_report(y_test, y_pred) )

from sklearn.naive_bayes import GaussianNB
nb = GaussianNB()
nb.fit(X_train,y_train)
y_pred1=nb.predict(X_test)

result2 = confusion_matrix(y_test, y_pred1) 
print('Confusion Matrix :')
print(result2) 
print('Accuracy Score :',accuracy_score(y_test, y_pred1))
print('Report : ')
print(classification_report(y_test, y_pred1))


from sklearn.neighbors import KNeighborsClassifier
knn = KNeighborsClassifier()
knn.fit(X_train,y_train)
y_pred2=knn.predict(X_test)

result3 = confusion_matrix(y_test, y_pred2) 
print('Confusion Matrix :')
print(result3) 
print('Accuracy Score :',accuracy_score(y_test, y_pred2))
print('Report : ')
print(classification_report(y_test, y_pred2))

from sklearn.tree import DecisionTreeClassifier
tr = DecisionTreeClassifier()
tr.fit(X_train,y_train)
y_pred3=tr.predict(X_test)

result4 = confusion_matrix(y_test, y_pred3) 
print('Confusion Matrix :')
print(result4) 
print('Accuracy Score :',accuracy_score(y_test, y_pred3))
print('Report : ')
print(classification_report(y_test, y_pred3))

from sklearn.ensemble import RandomForestClassifier
rf = RandomForestClassifier()
rf.fit(X_train,y_train)
y_pred4=rf.predict(X_test)

result5 = confusion_matrix(y_test, y_pred4) 
print('Confusion Matrix :')
print(result5) 
print('Accuracy Score :',accuracy_score(y_test, y_pred4))
print('Report : ')
print(classification_report(y_test, y_pred4))


names = ['LogisticRegression', 'NaiveBayes', 'K-NearestNeighbor','DecisionTree','RandomForest']

'''from sklearn.metrics import roc_auc_score
from sklearn.metrics import roc_curve
fpr1 , tpr1, thresholds = roc_curve(y_test,y_pred)
fpr2, tpr2, thresholds = roc_curve(y_test,y_pred1)
fpr3, tpr3, thresholds = roc_curve(y_test,y_pred2)
fpr4, tpr4, thresholds = roc_curve(y_test,y_pred3)
fpr5, tpr5, thresholds = roc_curve(y_test,y_pred4)

auc1 = roc_auc_score(y_test,y_pred)
auc2 = roc_auc_score(y_test,y_pred1)
auc3 = roc_auc_score(y_test,y_pred2)
auc4 = roc_auc_score(y_test,y_pred3)
auc5 = roc_auc_score(y_test,y_pred4)

fpr = [fpr1,fpr2,fpr3,fpr4,fpr5]
tpr = [tpr1,tpr2,tpr3,tpr4,tpr5]
auc = [auc1,auc2,auc3,auc4,auc5]

plt.figure(figsize=(15,10))
for i in range(0,5):
    plt.plot(fpr[i],tpr[i],label = '%s (Sensitivity = %.3f)'%(names[i],auc[i]))
plt.xlim([0.0,1.0])
plt.ylim([0.0,1.0])
plt.xlabel('False Positive Rate')
plt.ylabel('True Negative Rate')
plt.title('Reciever Operating Characteristic')
plt.legend(loc = 'lower right')
plt.show()'''

acc = [0.3040202825063383,0.7021369069177834,0.9864904020282507,0.9914885910901847,0.9935892792466497]

plt.figure(figsize=(8,5))
plt.subplot()
plt.bar(names, acc)
plt.suptitle('Accuracy of Models')
plt.show()
